{"version":3,"sources":["Api/index.ts","components/Select/Select.tsx","store/index.ts","App.tsx","index.tsx"],"names":["someAsyncFetch","a","arr","Promise","resolve","reject","setTimeout","push","id","name","Select","fetchData","label","prompt","storeValue","className","useState","opened","setOpened","currentValue","setCurrentValue","query","setQuery","options","setOptions","ref","useRef","dispatch","useDispatch","useEffect","handleClickOutside","e","current","contains","target","document","addEventListener","removeEventListener","getOptions","res","toggle","prev","filter","option","toLowerCase","indexOf","selectOption","payload","cn","type","placeholder","value","length","onChange","onClick","onTouchEnd","onKeyPress","key","map","SELECT_ITEM","defaultState","selectedItem","selectItems","action","rootReducer","combineReducers","selectReducer","state","item","store","createStore","App","currentItem","useSelector","getFruits","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cd5cc96d.chunk.js","sourcesContent":["export const someAsyncFetch = async () => {\n  const arr = [];\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      arr.push(\n        { id: 1, name: \"Apple\" },\n        { id: 2, name: \"Banana\" },\n        { id: 3, name: \"Cherry\" },\n        { id: 4, name: \"Lemon\" },\n        { id: 5, name: \"Lime\" }\n      );\n      resolve(arr);\n    }, 1000);\n  });\n};\n","import { SelectProps } from \"./Select.props\";\nimport { useState, useRef, useEffect } from \"react\";\nimport \"./Select.css\";\nimport cn from \"classnames\";\nimport { useDispatch } from \"react-redux\";\n\nexport const Select = ({\n  fetchData,\n  label = \"name\",\n  id = \"id\",\n  prompt = \"Search...\",\n  storeValue,\n  className,\n  ...props\n}: SelectProps): JSX.Element => {\n  const [opened, setOpened] = useState<boolean>(false);\n  const [currentValue, setCurrentValue] = useState<{} | null>(null);\n  const [query, setQuery] = useState<string>(\"\");\n  const [options, setOptions] = useState(null);\n  const ref = useRef(null);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    function handleClickOutside(e: MouseEvent) {\n      if (ref.current && !ref.current.contains(e.target)) {\n        setOpened(false);\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n\n  const getOptions = async () => {\n    const res = await fetchData();\n    setOptions(res);\n  };\n\n  const toggle = () => {\n    setOpened((prev) => !prev);\n    getOptions();\n  };\n\n  const filter = (options: {}[]) => {\n    return options.filter(\n      (option: {}) =>\n        option[label].toLowerCase().indexOf(query.toLowerCase()) > -1\n    );\n  };\n\n  const displayValue = (): string => {\n    if (query.length > 0) return query;\n    if (currentValue) return currentValue[label];\n    return \"\";\n  };\n\n  const selectOption = (option: {}) => {\n    setQuery(\"\");\n    setCurrentValue(option);\n    dispatch(\n      storeValue({\n        payload: option,\n      })\n    );\n    setOpened(false);\n  };\n\n  return (\n    <div className={cn(\"dropdown\", className)} ref={ref}>\n      <div className=\"dropdown__control\">\n        <div className=\"dropdown__control__selected_value\">\n          <input\n            type=\"text\"\n            placeholder={currentValue ? currentValue[label] : prompt}\n            value={displayValue()}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setOptions(null);\n              getOptions();\n              setCurrentValue(null);\n              setQuery(e.target.value);\n            }}\n            onClick={toggle}\n            onTouchEnd={toggle}\n            onKeyPress={(e: React.KeyboardEvent<HTMLInputElement>) => {\n              if (e.key === \"Enter\") toggle();\n            }}\n          />\n        </div>\n        <div className={`dropdown__control__arrow ${opened ? \"open\" : \"\"}`} />\n      </div>\n      <div className={`dropdown__options ${opened ? \"open\" : \"\"}`}>\n        {options && options.length > 0 ? (\n          filter(options).length > 0 ? (\n            filter(options).map((option) => (\n              <div\n                className={`dropdown__options_option ${\n                  currentValue === option ? \"selected\" : \"\"\n                }`}\n                onClick={() => selectOption(option)}\n                onTouchEnd={() => selectOption(option)}\n                key={option[id]}\n              >\n                {option[label]}\n              </div>\n            ))\n          ) : (\n            <div className=\"dropdown__options_option\">Not found...</div>\n          )\n        ) : (\n          <div className=\"dropdown__options_option\">Loading...</div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { combineReducers, createStore } from \"redux\";\n\nconst SELECT_ITEM = \"SELECT_ITEM\";\n\nconst defaultState = {\n  selectedItem: {},\n};\n\nfunction selectReducer(state = defaultState, action) {\n  switch (action.type) {\n    case SELECT_ITEM:\n      const item = action.payload;\n      return {\n        ...state,\n        selectedItem: item,\n      };\n    default:\n      return state;\n  }\n}\n\nexport const selectItems = (action) => ({\n  type: SELECT_ITEM,\n  payload: action.payload,\n});\n\nconst rootReducer = combineReducers({\n  selectReducer,\n});\n\nexport const store = createStore(rootReducer);\n\nexport type IRootState = ReturnType<typeof rootReducer>;\n","import { useSelector } from \"react-redux\";\nimport { someAsyncFetch } from \"./Api\";\nimport \"./App.css\";\nimport { Select } from \"./components/Select/Select\";\nimport { IRootState, selectItems } from \"./store\";\n\nconst App = (): JSX.Element => {\n  const currentItem = useSelector(\n    (state: IRootState) => state.selectReducer.selectedItem\n  );\n\n  const getFruits = async () => {\n    const res = await someAsyncFetch();\n    return res;\n  };\n\n  return (\n    <main className=\"wrapper\">\n      <div>\n        <h3>Custom async select with search</h3>\n        <h4>Selected item is: {currentItem?.name} </h4>\n        <Select\n          fetchData={getFruits}\n          prompt=\"Select...\"\n          id=\"id\"\n          label=\"name\"\n          storeValue={selectItems}\n        />\n      </div>\n    </main>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}